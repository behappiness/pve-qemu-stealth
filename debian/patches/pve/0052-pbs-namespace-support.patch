From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Wolfgang Bumiller <w.bumiller@proxmox.com>
Date: Tue, 26 Apr 2022 16:06:28 +0200
Subject: [PATCH] pbs: namespace support

Signed-off-by: Wolfgang Bumiller <w.bumiller@proxmox.com>
[FE: adapt to QAPI change dropping redundant has_*]
Signed-off-by: Fiona Ebner <f.ebner@proxmox.com>
---
 block/monitor/block-hmp-cmds.c |  1 +
 block/pbs.c                    | 25 +++++++++++++++++++++----
 pbs-restore.c                  | 19 ++++++++++++++++---
 pve-backup.c                   |  6 +++++-
 qapi/block-core.json           |  5 ++++-
 5 files changed, 47 insertions(+), 9 deletions(-)

diff --git a/block/monitor/block-hmp-cmds.c b/block/monitor/block-hmp-cmds.c
index f852c70611..ac23f21eef 100644
--- a/block/monitor/block-hmp-cmds.c
+++ b/block/monitor/block-hmp-cmds.c
@@ -1055,6 +1055,7 @@ void coroutine_fn hmp_backup(Monitor *mon, const QDict *qdict)
         NULL, // PBS key_password
         NULL, // PBS master_keyfile
         NULL, // PBS fingerprint
+        NULL, // PBS backup-ns
         NULL, // PBS backup-id
         false, 0, // PBS backup-time
         false, false, // PBS use-dirty-bitmap
diff --git a/block/pbs.c b/block/pbs.c
index 5d20789084..a2211e0f3b 100644
--- a/block/pbs.c
+++ b/block/pbs.c
@@ -15,6 +15,7 @@
 #include <proxmox-backup-qemu.h>
 
 #define PBS_OPT_REPOSITORY "repository"
+#define PBS_OPT_NAMESPACE "namespace"
 #define PBS_OPT_SNAPSHOT "snapshot"
 #define PBS_OPT_ARCHIVE "archive"
 #define PBS_OPT_KEYFILE "keyfile"
@@ -28,6 +29,7 @@ typedef struct {
     int64_t length;
 
     char *repository;
+    char *namespace;
     char *snapshot;
     char *archive;
 } BDRVPBSState;
@@ -41,6 +43,11 @@ static QemuOptsList runtime_opts = {
             .type = QEMU_OPT_STRING,
             .help = "The server address and repository to connect to.",
         },
+        {
+            .name = PBS_OPT_NAMESPACE,
+            .type = QEMU_OPT_STRING,
+            .help = "Optional: The snapshot's namespace.",
+        },
         {
             .name = PBS_OPT_SNAPSHOT,
             .type = QEMU_OPT_STRING,
@@ -77,7 +84,7 @@ static QemuOptsList runtime_opts = {
 
 
 // filename format:
-// pbs:repository=<repo>,snapshot=<snap>,password=<pw>,key_password=<kpw>,fingerprint=<fp>,archive=<archive>
+// pbs:repository=<repo>,namespace=<ns>,snapshot=<snap>,password=<pw>,key_password=<kpw>,fingerprint=<fp>,archive=<archive>
 static void pbs_parse_filename(const char *filename, QDict *options,
                                      Error **errp)
 {
@@ -113,6 +120,7 @@ static int pbs_open(BlockDriverState *bs, QDict *options, int flags,
     s->archive = g_strdup(qemu_opt_get(opts, PBS_OPT_ARCHIVE));
     const char *keyfile = qemu_opt_get(opts, PBS_OPT_KEYFILE);
     const char *password = qemu_opt_get(opts, PBS_OPT_PASSWORD);
+    const char *namespace = qemu_opt_get(opts, PBS_OPT_NAMESPACE);
     const char *fingerprint = qemu_opt_get(opts, PBS_OPT_FINGERPRINT);
     const char *key_password = qemu_opt_get(opts, PBS_OPT_ENCRYPTION_PASSWORD);
 
@@ -125,9 +133,12 @@ static int pbs_open(BlockDriverState *bs, QDict *options, int flags,
     if (!key_password) {
         key_password = getenv("PBS_ENCRYPTION_PASSWORD");
     }
+    if (namespace) {
+        s->namespace = g_strdup(namespace);
+    }
 
     /* connect to PBS server in read mode */
-    s->conn = proxmox_restore_new(s->repository, s->snapshot, password,
+    s->conn = proxmox_restore_new_ns(s->repository, s->snapshot, s->namespace, password,
         keyfile, key_password, fingerprint, &pbs_error);
 
     /* invalidates qemu_opt_get char pointers from above */
@@ -172,6 +183,7 @@ static int pbs_file_open(BlockDriverState *bs, QDict *options, int flags,
 static void pbs_close(BlockDriverState *bs) {
     BDRVPBSState *s = bs->opaque;
     g_free(s->repository);
+    g_free(s->namespace);
     g_free(s->snapshot);
     g_free(s->archive);
     proxmox_restore_disconnect(s->conn);
@@ -253,8 +265,13 @@ static coroutine_fn int pbs_co_pwritev(BlockDriverState *bs,
 static void pbs_refresh_filename(BlockDriverState *bs)
 {
     BDRVPBSState *s = bs->opaque;
-    snprintf(bs->exact_filename, sizeof(bs->exact_filename), "%s/%s(%s)",
-             s->repository, s->snapshot, s->archive);
+    if (s->namespace) {
+        snprintf(bs->exact_filename, sizeof(bs->exact_filename), "%s/%s:%s(%s)",
+                 s->repository, s->namespace, s->snapshot, s->archive);
+    } else {
+        snprintf(bs->exact_filename, sizeof(bs->exact_filename), "%s/%s(%s)",
+                 s->repository, s->snapshot, s->archive);
+    }
 }
 
 static const char *const pbs_strong_runtime_opts[] = {
diff --git a/pbs-restore.c b/pbs-restore.c
index 2f834cf42e..f03d9bab8d 100644
--- a/pbs-restore.c
+++ b/pbs-restore.c
@@ -29,7 +29,7 @@
 static void help(void)
 {
     const char *help_msg =
-        "usage: pbs-restore [--repository <repo>] snapshot archive-name target [command options]\n"
+        "usage: pbs-restore [--repository <repo>] [--ns namespace] snapshot archive-name target [command options]\n"
         ;
 
     printf("%s", help_msg);
@@ -77,6 +77,7 @@ int main(int argc, char **argv)
     Error *main_loop_err = NULL;
     const char *format = "raw";
     const char *repository = NULL;
+    const char *backup_ns = NULL;
     const char *keyfile = NULL;
     int verbose = false;
     bool skip_zero = false;
@@ -90,6 +91,7 @@ int main(int argc, char **argv)
             {"verbose", no_argument, 0, 'v'},
             {"format", required_argument, 0, 'f'},
             {"repository", required_argument, 0, 'r'},
+            {"ns", required_argument, 0, 'n'},
             {"keyfile", required_argument, 0, 'k'},
             {0, 0, 0, 0}
         };
@@ -110,6 +112,9 @@ int main(int argc, char **argv)
             case 'r':
                 repository = g_strdup(argv[optind - 1]);
                 break;
+            case 'n':
+                backup_ns = g_strdup(argv[optind - 1]);
+                break;
             case 'k':
                 keyfile = g_strdup(argv[optind - 1]);
                 break;
@@ -160,8 +165,16 @@ int main(int argc, char **argv)
         fprintf(stderr, "connecting to repository '%s'\n", repository);
     }
     char *pbs_error = NULL;
-    ProxmoxRestoreHandle *conn = proxmox_restore_new(
-        repository, snapshot, password, keyfile, key_password, fingerprint, &pbs_error);
+    ProxmoxRestoreHandle *conn = proxmox_restore_new_ns(
+        repository,
+        snapshot,
+        backup_ns,
+        password,
+        keyfile,
+        key_password,
+        fingerprint,
+        &pbs_error
+    );
     if (conn == NULL) {
         fprintf(stderr, "restore failed: %s\n", pbs_error);
         return -1;
diff --git a/pve-backup.c b/pve-backup.c
index 04c5f561cd..08dfb9cbda 100644
--- a/pve-backup.c
+++ b/pve-backup.c
@@ -12,6 +12,8 @@
 #include "qapi/qmp/qerror.h"
 #include "qemu/cutils.h"
 
+#include <proxmox-backup-qemu.h>
+
 /* PVE backup state and related function */
 
 /*
@@ -533,6 +535,7 @@ UuidInfo coroutine_fn *qmp_backup(
     const char *key_password,
     const char *master_keyfile,
     const char *fingerprint,
+    const char *backup_ns,
     const char *backup_id,
     bool has_backup_time, int64_t backup_time,
     bool has_use_dirty_bitmap, bool use_dirty_bitmap,
@@ -672,8 +675,9 @@ UuidInfo coroutine_fn *qmp_backup(
         firewall_name = "fw.conf";
 
         char *pbs_err = NULL;
-        pbs = proxmox_backup_new(
+        pbs = proxmox_backup_new_ns(
             backup_file,
+            backup_ns,
             backup_id,
             backup_time,
             dump_cb_block_size,
diff --git a/qapi/block-core.json b/qapi/block-core.json
index 568feb63ad..9edeb33d82 100644
--- a/qapi/block-core.json
+++ b/qapi/block-core.json
@@ -912,6 +912,8 @@
 #
 # @fingerprint: server cert fingerprint (optional for format 'pbs')
 #
+# @backup-ns: backup namespace (required for format 'pbs')
+#
 # @backup-id: backup ID (required for format 'pbs')
 #
 # @backup-time: backup timestamp (Unix epoch, required for format 'pbs')
@@ -931,6 +933,7 @@
                                     '*key-password': 'str',
                                     '*master-keyfile': 'str',
                                     '*fingerprint': 'str',
+                                    '*backup-ns': 'str',
                                     '*backup-id': 'str',
                                     '*backup-time': 'int',
                                     '*use-dirty-bitmap': 'bool',
@@ -3385,7 +3388,7 @@
 { 'struct': 'BlockdevOptionsPbs',
   'data': { 'repository': 'str', 'snapshot': 'str', 'archive': 'str',
             '*keyfile': 'str', '*password': 'str', '*fingerprint': 'str',
-            '*key_password': 'str' } }
+            '*key_password': 'str', '*namespace': 'str' } }
 
 ##
 # @BlockdevOptionsNVMe:
